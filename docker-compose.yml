version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:17-alpine
    container_name: issue_tracker_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-issue_tracker}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - issue_tracker_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: issue_tracker_backend
    ports:
      - "8000:8000"
      - "5678:5678"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-issue_tracker}
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      ENVIRONMENT: development
      LOG_LEVEL: debug 
      BACKEND_CORS_ORIGINS: '["http://localhost:5173", "http://localhost:3000"]'
    volumes:
      - ./backend:/app
      - backend_cache:/root/.cache
    depends_on:
      db:
        condition: service_healthy
    networks:
      - issue_tracker_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: issue_tracker_frontend
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend_cache:/app/.vite
    depends_on:
      - backend
    networks:
      - issue_tracker_network
    command: npm run dev -- --host

networks:
  issue_tracker_network:
    driver: bridge

volumes:
  postgres_data:
  backend_cache:
  frontend_cache: